/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/copiaSeguridad.js":
/*!**********************************!*\
  !*** ./src/js/copiaSeguridad.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n(function() {\r\n\r\nconst token = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\r\nconst copiaSeguridadLaptop = document.querySelectorAll('.copia-laptop')\r\nconst cargaMasivaLaptop = document.querySelectorAll('.carga-laptop')\r\nconst copiaSeguridadTelefono = document.querySelectorAll('.copia-telefono')\r\nconst cargaMasivaTelefono = document.querySelectorAll('.carga-telefono')\r\nconst copiaSeguridadTablet = document.querySelectorAll('.copia-tablet')\r\nconst cargaMasivaTablet = document.querySelectorAll('.carga-tablet')\r\nconst file = new FileReader();\r\n\r\ncopiaSeguridadLaptop.forEach(boton => {\r\n    boton.addEventListener('click', descargarCopiaLaptop)\r\n})\r\n\r\ncargaMasivaLaptop.forEach(boton => {\r\n    boton.addEventListener('click', subirMasivaLaptop)\r\n})\r\n\r\ncopiaSeguridadTelefono.forEach(boton => {\r\n    boton.addEventListener('click', descargarCopiaTelefono)\r\n})\r\n\r\ncargaMasivaTelefono.forEach(boton => {\r\n    boton.addEventListener('click', subirMasivaTelefono)\r\n})\r\n\r\ncopiaSeguridadTablet.forEach(boton => {\r\n    boton.addEventListener('click', descargarCopiaTablet)\r\n})\r\n\r\ncargaMasivaTablet.forEach(boton => {\r\n    boton.addEventListener('click', subirMasivaTablet)\r\n})\r\n\r\nasync function descargarCopiaLaptop(){\r\n    try {\r\n        const url = '/backup/laptops'\r\n\r\n        const respuesta = await fetch(url, {\r\n            method: 'POST',\r\n            headers:{\r\n                'CSRF-Token': token\r\n            }\r\n        })\r\n\r\n        const { laptops } = await respuesta.json()\r\n\r\n        const a = document.createElement(\"a\");\r\n        const archivo = new Blob([JSON.stringify(laptops, undefined, 2)], { type: 'application/json;charset=utf-8' });\r\n        const urla = URL.createObjectURL(archivo);\r\n        a.href = urla;\r\n        a.download = 'CopiaSeguridadLaptop';\r\n        a.click();\r\n        URL.revokeObjectURL(urla);\r\n\r\n        laptops.forEach(element => {\r\n            a.href = `/uploads/${element.imagen}`\r\n            a.download= element.imagen\r\n            a.click();\r\n        });\r\n        \r\n    }catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nasync function subirMasivaLaptop(){\r\n    const input = document.createElement(\"input\")\r\n    input.type = 'file'\r\n    input.accept = '.json'\r\n    //input.click()\r\n    input.addEventListener('click',\r\n         input.click(),\r\n         input.addEventListener('change', e =>{\r\n         file.onloadend = handleFileReadLaptop\r\n         file.readAsText(e.target.files[0])\r\n         })\r\n    )\r\n}\r\n\r\nasync function handleFileReadLaptop (e){\r\n    const errorEl = document.querySelector('.errores')\r\n    const success = document.querySelector('.correcto')\r\n    const carga = document.querySelector('.cargando')\r\n    const detalles = document.querySelector('.error-detalles')\r\n    try {\r\n        carga.classList.remove('hidden')\r\n        const content = file.result;\r\n\r\n        const url = '/backup/carga-masiva-laptops'\r\n\r\n        const respuesta = await fetch(url, {\r\n            method: 'POST',\r\n            headers:{\r\n                'CSRF-Token': token,\r\n                 Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: content,\r\n        \r\n        })\r\n        \r\n        const { result, errores } = await respuesta.json()\r\n        console.log(result)\r\n        if(result != \"ok\"){\r\n            console.log(errores)\r\n           carga.classList.add('hidden')\r\n           errorEl.classList.remove('hidden')\r\n           success.classList.add('hidden')\r\n\r\n           detalles.addEventListener('click', e => {\r\n             const a = document.createElement(\"a\");\r\n             const archivo = new Blob([JSON.stringify(errores, undefined, 2)], { type: 'application/json;charset=utf-8' });\r\n             const urla = URL.createObjectURL(archivo);\r\n             a.href = urla;\r\n             a.download = 'Errores';\r\n             a.click();\r\n           })\r\n           \r\n        }else{\r\n           carga.classList.add('hidden')\r\n           errorEl.classList.add('hidden')\r\n           success.classList.remove('hidden')\r\n           alert('Cargado correctamente')\r\n        }\r\n       \r\n    } catch (error) {\r\n      console.log(error)\r\n      errorEl.classList.remove('hidden')\r\n      carga.classList.add('hidden')\r\n      success.classList.add('hidden')\r\n      detalles.addEventListener('click', e => {\r\n        const a = document.createElement(\"a\");\r\n        const archivo = new Blob([JSON.stringify({error:\"El archivo esta dañado o los datos son invalidos\"}, undefined, 2)], { type: 'application/json;charset=utf-8' });\r\n        const urla = URL.createObjectURL(archivo);\r\n        a.href = urla;\r\n        a.download = 'Errores';\r\n        a.click();\r\n      })\r\n      alert('Verifique que los datos del archivo no contengan errores')\r\n    }\r\n}\r\n\r\nasync function descargarCopiaTelefono(){\r\n    try {\r\n        const url = '/backup/telefonos'\r\n\r\n        const respuesta = await fetch(url, {\r\n            method: 'POST',\r\n            headers:{\r\n                'CSRF-Token': token\r\n            }\r\n        })\r\n\r\n        const { telefonos } = await respuesta.json()\r\n\r\n        const a = document.createElement(\"a\");\r\n        const archivo = new Blob([JSON.stringify(telefonos, undefined, 2)], { type: 'application/json;charset=utf-8' });\r\n        const urla = URL.createObjectURL(archivo);\r\n        a.href = urla;\r\n        a.download = 'CopiaSeguridadTelefono';\r\n        a.click();\r\n        URL.revokeObjectURL(urla);\r\n\r\n        telefonos.forEach(element => {\r\n            a.href = `/uploads/${element.imagen}`\r\n            a.download= element.imagen\r\n            a.click();\r\n        });\r\n        \r\n    }catch (error) {\r\n        console.log(error)\r\n    }   \r\n}\r\n\r\nasync function subirMasivaTelefono(){\r\n    const input = document.createElement(\"input\")\r\n    input.type = 'file'\r\n    input.accept = '.json'\r\n    //input.click()\r\n    input.addEventListener('click',\r\n         input.click(),\r\n         input.addEventListener('change', e =>{\r\n         file.onloadend = handleFileReadTelefono\r\n         file.readAsText(e.target.files[0])\r\n         })\r\n    )\r\n}\r\n\r\nasync function handleFileReadTelefono (e){\r\n    const errorEl = document.querySelector('.errores')\r\n    const success = document.querySelector('.correcto')\r\n    const carga = document.querySelector('.cargando')\r\n    const detalles = document.querySelector('.error-detalles')\r\n    try {\r\n        carga.classList.remove('hidden')\r\n        const content = file.result;\r\n\r\n        const url = '/backup/carga-masiva-telefonos'\r\n\r\n        const respuesta = await fetch(url, {\r\n            method: 'POST',\r\n            headers:{\r\n                'CSRF-Token': token,\r\n                 Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: content,\r\n        \r\n        })\r\n        \r\n        const { result, errores } = await respuesta.json()\r\n        console.log(result)\r\n        if(result != \"ok\"){\r\n            console.log(errores)\r\n           carga.classList.add('hidden')\r\n           errorEl.classList.remove('hidden')\r\n           success.classList.add('hidden')\r\n\r\n           detalles.addEventListener('click', e => {\r\n             const a = document.createElement(\"a\");\r\n             const archivo = new Blob([JSON.stringify(errores, undefined, 2)], { type: 'application/json;charset=utf-8' });\r\n             const urla = URL.createObjectURL(archivo);\r\n             a.href = urla;\r\n             a.download = 'Errores';\r\n             a.click();\r\n           })\r\n           \r\n        }else{\r\n           carga.classList.add('hidden')\r\n           errorEl.classList.add('hidden')\r\n           success.classList.remove('hidden')\r\n           alert('Cargado correctamente')\r\n        }\r\n       \r\n    } catch (error) {\r\n      console.log(error)\r\n      errorEl.classList.remove('hidden')\r\n      carga.classList.add('hidden')\r\n      success.classList.add('hidden')\r\n      detalles.addEventListener('click', e => {\r\n        const a = document.createElement(\"a\");\r\n        const archivo = new Blob([JSON.stringify({error:\"El archivo esta dañado o los datos son invalidos\"}, undefined, 2)], { type: 'application/json;charset=utf-8' });\r\n        const urla = URL.createObjectURL(archivo);\r\n        a.href = urla;\r\n        a.download = 'Errores';\r\n        a.click();\r\n      })\r\n      alert('Verifique que los datos del archivo no contengan errores')\r\n    }\r\n}\r\n\r\nasync function descargarCopiaTablet(){\r\n    try {\r\n        const url = '/backup/tablets'\r\n\r\n        const respuesta = await fetch(url, {\r\n            method: 'POST',\r\n            headers:{\r\n                'CSRF-Token': token\r\n            }\r\n        })\r\n\r\n        const { tablets } = await respuesta.json()\r\n\r\n        const a = document.createElement(\"a\");\r\n        const archivo = new Blob([JSON.stringify(tablets, undefined, 2)], { type: 'application/json;charset=utf-8' });\r\n        const urla = URL.createObjectURL(archivo);\r\n        a.href = urla;\r\n        a.download = 'CopiaSeguridadTablet';\r\n        a.click();\r\n        URL.revokeObjectURL(urla);\r\n\r\n        tablets.forEach(element => {\r\n            a.href = `/uploads/${element.imagen}`\r\n            a.download= element.imagen\r\n            a.click();\r\n        });\r\n        \r\n    }catch (error) {\r\n        console.log(error)\r\n    }   \r\n}\r\n\r\nasync function subirMasivaTablet(){\r\n    const input = document.createElement(\"input\")\r\n    input.type = 'file'\r\n    input.accept = '.json'\r\n    //input.click()\r\n    input.addEventListener('click',\r\n         input.click(),\r\n         input.addEventListener('change', e =>{\r\n         file.onloadend = handleFileReadTablet\r\n         file.readAsText(e.target.files[0])\r\n         })\r\n    )\r\n}\r\n\r\nasync function handleFileReadTablet (e){\r\n    const errorEl = document.querySelector('.errores')\r\n    const success = document.querySelector('.correcto')\r\n    const carga = document.querySelector('.cargando')\r\n    const detalles = document.querySelector('.error-detalles')\r\n    try {\r\n        carga.classList.remove('hidden')\r\n        const content = file.result;\r\n\r\n        const url = '/backup/carga-masiva-tablets'\r\n\r\n        const respuesta = await fetch(url, {\r\n            method: 'POST',\r\n            headers:{\r\n                'CSRF-Token': token,\r\n                 Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: content,\r\n        \r\n        })\r\n        \r\n        const { result, errores } = await respuesta.json()\r\n        console.log(result)\r\n        if(result != \"ok\"){\r\n           console.log(errores)\r\n           carga.classList.add('hidden')\r\n           errorEl.classList.remove('hidden')\r\n           success.classList.add('hidden')\r\n\r\n           detalles.addEventListener('click', e => {\r\n             const a = document.createElement(\"a\");\r\n             const archivo = new Blob([JSON.stringify(errores, undefined, 2)], { type: 'application/json;charset=utf-8' });\r\n             const urla = URL.createObjectURL(archivo);\r\n             a.href = urla;\r\n             a.download = 'Errores';\r\n             a.click();\r\n           })\r\n           \r\n        }else{\r\n           carga.classList.add('hidden')\r\n           errorEl.classList.add('hidden')\r\n           success.classList.remove('hidden')\r\n           alert('Cargado correctamente')\r\n        }\r\n       \r\n    } catch (error) {\r\n      console.log(error)\r\n      errorEl.classList.remove('hidden')\r\n      carga.classList.add('hidden')\r\n      success.classList.add('hidden')\r\n      detalles.addEventListener('click', e => {\r\n        const a = document.createElement(\"a\");\r\n        const archivo = new Blob([JSON.stringify({error:\"El archivo esta dañado o los datos son invalidos\"}, undefined, 2)], { type: 'application/json;charset=utf-8' });\r\n        const urla = URL.createObjectURL(archivo);\r\n        a.href = urla;\r\n        a.download = 'Errores';\r\n        a.click();\r\n      })\r\n      alert('Verifique que los datos del archivo no contengan errores')\r\n    }\r\n}\r\n\r\n})()\n\n//# sourceURL=webpack://comparador/./src/js/copiaSeguridad.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/copiaSeguridad.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;